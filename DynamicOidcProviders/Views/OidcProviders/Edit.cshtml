@model OidcProviderUpdateViewModel
@{
    ViewData["Title"] = "Edit OIDC Provider";
}

<div class="row">
    <div class="col-12">
        <h1>@ViewData["Title"]</h1>
    </div>
</div>

<hr />

<div class="row">
    <div class="col-12 col-md-6">
        @using (Html.BeginForm("Edit", "OidcProviders", new { providerId = Model.ProviderId }, FormMethod.Post))
        {
            <div class="form-group">
                @Html.LabelFor(x => x.ProviderId, "Provider ID")
                @Html.TextBoxFor(x => x.ProviderId, new { @class = "form-control", disabled = "disabled" })
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Name, "Name")
                @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Name, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.AuthorityUrl, "Authority URL")
                @Html.TextBoxFor(x => x.AuthorityUrl, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.AuthorityUrl, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.ClientId, "Client ID")
                @Html.TextBoxFor(x => x.ClientId, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.ClientId, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.ClientSecret, "Client Secret")
                @Html.TextBoxFor(x => x.ClientSecret, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.ClientSecret, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.ExpectedResponseType, "Expected response type")
                @Html.TextBoxFor(x => x.ExpectedResponseType, new { @class = "form-control" })
                <small class="form-text text-muted">E.g.: "code", "token", "id_token", "code token", "code token id_token"</small>
                @Html.ValidationMessageFor(x => x.ExpectedResponseType, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.ScopesToRequest, "Scopes to request")
                @Html.TextBoxFor(x => x.ScopesToRequest, new { @class = "form-control" })
                <small class="form-text text-muted">If many, use a space character as the separator</small>
                @Html.ValidationMessageFor(x => x.ScopesToRequest, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <div class="form-check">
                    @Html.CheckBoxFor(x => x.RequireHttpsMetadata, new { @class = "form-check-input" })
                    @Html.LabelFor(x => x.RequireHttpsMetadata, "Require HTTPS metadata", new { @class = "form-check-label" })
                    @Html.ValidationMessageFor(x => x.RequireHttpsMetadata, null, new { @class = "text-danger" })
                </div>
            </div>

            <input type="submit" class="btn btn-outline-primary float-right" value="Save" />
        }
    </div>
</div>